% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim-data-access.R
\name{see.group.data}
\alias{see.group.data}
\title{Get data of all individuals that belong to a group.}
\usage{
see.group.data(group, data.type)
}
\arguments{
\item{group}{an integer: the group number of the group to have a look at}

\item{data.type}{a string that will be used to identify the type of data
to be extracted. String parsing is case-insensitive.
If the first character is 'N', the 'N'ames of group members will be extracted. 
If the first character is 'D', the I'D's of group members will be extracted. 
If the first character is 'X', the Inde'X'es of group members will be extracted. 
If the first character is 'G', the 'G'enotypes of the group members will be extracted.
If the first character is 'C', the allele 'c'ounts of the group members for each marker
will be extracted (that is, 0 for no copies of `count.allele` at that marker,
1 for 1 copy, 2 for 2 copies, etc). A (group members)x(markers) matrix.
If the first character is 'B', the 'b'reeding values/GEBVs of group members will be returned.
If it starts with "P1", the first parent of each group member is returned. As usual in 
genomicSimulation, if the parent has a name, its name will be what is returned, otherwise,
it will be its ID.
If it starts with "P2", the second parent of each group member is returned. As usual in 
genomicSimulation, if the parent has a name, its name will be what is returned, otherwise,
it will be its ID.
If it starts with "ped", the full pedigree log of each group member is returned.}
}
\value{
A vector containing the desired data output for each member of the group.
}
\description{
\code{see.group.data} allows you to extract the names, IDs, indexes, 
genotypes (as strings), breeding values, or parentage of group members as an R vector.
As long as the group is not modified in between calls, the same ordering of group
members will be used, so this function can be used to construct tables of data, eg.
\code{data.frame("i"=see.group.data(3,"X"),"GEBV"=see.group.data(3,"BV"))}.
}
\section{Warning about indexes}{

Deleting a group (\code{\link{delete.group}}) may cause the indexes of group members to 
change (as the positions/indexes that they are stored in the internal matrix may be
rearranged). Therefore, you must ensure that there is no call to \code{\link{delete.group}}
between loading indexes with this function and passing them to a function that takes indexes
as inputs (eg \code{\link{make.group}}).
}

\seealso{
Other grouping functions: 
\code{\link{break.group.evenly}()},
\code{\link{break.group.into.buckets}()},
\code{\link{break.group.into.families}()},
\code{\link{break.group.into.halfsib.families}()},
\code{\link{break.group.into.individuals}()},
\code{\link{break.group.randomly}()},
\code{\link{break.group.with.probabilities}()},
\code{\link{change.label.default}()},
\code{\link{combine.groups}()},
\code{\link{delete.group}()},
\code{\link{delete.label}()},
\code{\link{make.group.from.label.range}()},
\code{\link{make.group.from.label}()},
\code{\link{make.group}()},
\code{\link{see.existing.groups}()},
\code{\link{see.group.gene.data}()},
\code{\link{select.by.gebv}()}

Other data access functions: 
\code{\link{see.group.gene.data}()},
\code{\link{see.minimum.GEBV}()},
\code{\link{see.optimal.GEBV}()},
\code{\link{see.optimal.haplotype}()},
\code{\link{see.optimal.possible.GEBV}()},
\code{\link{see.optimal.possible.haplotype}()}
}
\concept{data access functions}
\concept{grouping functions}
